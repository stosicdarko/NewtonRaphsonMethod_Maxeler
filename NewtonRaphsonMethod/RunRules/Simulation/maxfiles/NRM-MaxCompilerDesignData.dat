#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        1
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          44944
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-08-07"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "NRM"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/NRM_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160113
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 42)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "NRM_Kernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(NRM_Kernel, Kernel)
MANAGER_NODE(x1, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_3, DualAspectReg)
MANAGER_NODE(Stream_7, StreamPullPushAdapter)
MANAGER_NODE(Stream_5, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(NRM_Kernel, x1, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(x1, x1, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_3, input, IN, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_3, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_7, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_7, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_5, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_5, output, OUT, STREAM, 64, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(NRM_Kernel, x1, Stream_5, input, 64)
MANAGER_STREAM(Stream_3, output, Stream_7, input, 128)
MANAGER_STREAM(Stream_7, output, x1, x1, 128)
MANAGER_STREAM(Stream_5, output, Stream_3, input, 64)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(NRM_Kernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(x1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_3, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_7, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_5, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(NRM_Kernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(NRM_Kernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(NRM_Kernel, NRM_Kernel)
#endif


#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(NRM_Kernel, x1, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(NRM_Kernel, NRM_Kernel, "NRM_Kernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_5, FifoPushToPullSync, "Stream_5", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_3, DualAspectRegSync, "Stream_3", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_7, PullToPushAdapterSync, "Stream_7")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x1, PCIePushSinkSyncMax3, "x1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 0, 1, 0, 0, 0, 0, 0, 42)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "18b7d8d7c699bc821f3c68e8e7cade091d7282952905b1bb41dce460543178b2")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_fill_level, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_flush_level, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_flush_start_level, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_full_level, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(NRM_Kernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x1, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(NRM_Kernel.x0, 0x0, 8, hwFloat(11, 53))
REG(NRM_Kernel.io_x1_force_disabled, 0x8, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(NRM_Kernel.run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(NRM_Kernel.current_run_cycle_count, 0xf, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(NRM_Kernel.dbg_ctld_almost_empty, 0x15, 1, hwBits(0))
REG(NRM_Kernel.dbg_ctld_done, 0x16, 1, hwBits(0))
REG(NRM_Kernel.dbg_ctld_empty, 0x17, 1, hwBits(0))
REG(NRM_Kernel.dbg_ctld_read, 0x18, 1, hwBits(0))
REG(NRM_Kernel.dbg_ctld_read_pipe_dbg, 0x19, 1, hwBits(0))
REG(NRM_Kernel.dbg_ctld_request, 0x1a, 1, hwBits(0))
REG(NRM_Kernel.dbg_done_out, 0x1b, 1, hwBits(1))
REG(NRM_Kernel.dbg_fill_level, 0x1c, 1, hwBits(3))
REG(NRM_Kernel.dbg_flush_level, 0x1d, 1, hwBits(3))
REG(NRM_Kernel.dbg_flush_start, 0x1e, 1, hwBits(1))
REG(NRM_Kernel.dbg_flush_start_level, 0x1f, 1, hwBits(3))
REG(NRM_Kernel.dbg_flushing, 0x20, 1, hwBits(1))
REG(NRM_Kernel.dbg_full_level, 0x21, 1, hwBits(3))
REG(NRM_Kernel.dbg_out_stall, 0x22, 1, hwBits(1))
REG(NRM_Kernel.dbg_out_valid, 0x23, 1, hwBits(1))
REG(NRM_Kernel.dbg_stall_vector, 0x24, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x25, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x26, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(NRM_Kernel.x0, 0x0, 8, hwFloat(11, 53), HOST_WRITE_ONLY, false)
REG_V2(NRM_Kernel.io_x1_force_disabled, 0x8, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(NRM_Kernel.run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(NRM_Kernel.current_run_cycle_count, 0xf, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_ctld_almost_empty, 0x15, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_ctld_done, 0x16, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_ctld_empty, 0x17, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_ctld_read, 0x18, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_ctld_read_pipe_dbg, 0x19, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_ctld_request, 0x1a, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_done_out, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_fill_level, 0x1c, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_flush_level, 0x1d, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_flush_start, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_flush_start_level, 0x1f, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_flushing, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_full_level, 0x21, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_out_stall, 0x22, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_out_valid, 0x23, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(NRM_Kernel.dbg_stall_vector, 0x24, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x25, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x26, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("18b7d8d7c699bc821f3c68e8e7cade091d7282952905b1bb41dce460543178b2")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME NRM
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_NRM_H
#define SLIC_DECLARATIONS_NRM_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define NRM_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_maxmitr Interface Parameter "maxmitr".
 * \param [in] param_x0 Interface Parameter "x0".
 * \param [out] outstream_x1 The stream should be of size (param_maxmitr * 8) bytes.
 */
void NRM(
	uint64_t param_maxmitr,
	double param_x0,
	double *outstream_x1);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_maxmitr Interface Parameter "maxmitr".
 * \param [in] param_x0 Interface Parameter "x0".
 * \param [out] outstream_x1 The stream should be of size (param_maxmitr * 8) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *NRM_nonblock(
	uint64_t param_maxmitr,
	double param_x0,
	double *outstream_x1);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t param_maxmitr; /**<  [in] Interface Parameter "maxmitr". */
	double param_x0; /**<  [in] Interface Parameter "x0". */
	double *outstream_x1; /**<  [out] The stream should be of size (param_maxmitr * 8) bytes. */
} NRM_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void NRM_run(
	max_engine_t *engine,
	NRM_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *NRM_run_nonblock(
	max_engine_t *engine,
	NRM_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void NRM_run_group(max_group_t *group, NRM_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *NRM_run_group_nonblock(max_group_t *group, NRM_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void NRM_run_array(max_engarray_t *engarray, NRM_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *NRM_run_array_nonblock(max_engarray_t *engarray, NRM_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* NRM_convert(max_file_t *maxfile, NRM_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* NRM_init(void);

/* Error handling functions */
int NRM_has_errors(void);
const char* NRM_get_errors(void);
void NRM_clear_errors(void);
/* Free statically allocated maxfile data */
void NRM_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int NRM_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int NRM_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_NRM_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(NRM_Kernel, 122, NodeInputMappedReg, "Scalar input (io_x1_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:27)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 123, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:27)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 0, NodeInputMappedReg, "Scalar input (x0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:15)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 1, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 2, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 3, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 169, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 5, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 168, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 7, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 8, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 167, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 10, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 11, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 12, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 13, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 14, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 15, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 166, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 17, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 165, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 19, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 20, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 164, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 22, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 23, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 24, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 25, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 26, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 27, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 163, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 29, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 162, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 31, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 32, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 161, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 34, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 35, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 36, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 37, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 38, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 39, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 160, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 41, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 159, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 43, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 44, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 158, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 46, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 47, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 48, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 49, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 50, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 51, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 157, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 53, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 156, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 55, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 56, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 155, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 58, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 59, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 60, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 61, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 62, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 63, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 154, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 65, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 153, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 67, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 68, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 152, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 70, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 71, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 72, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 73, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 74, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 75, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 151, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 77, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 150, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 79, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 80, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 149, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 82, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 83, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 84, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 85, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 86, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 87, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 148, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 89, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 147, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 91, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 92, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 146, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 94, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 95, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 96, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 97, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 98, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 99, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 145, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 101, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 144, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 103, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 104, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 143, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 106, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 107, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 108, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 109, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 110, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 111, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 142, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 113, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 141, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 115, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:995)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 116, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:960)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 140, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 118, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 119, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1006)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:22)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 120, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:914)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:23)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 125, NodeOutput, "Output(x1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nnrm.NRM_Kernel.<init>(NRM_Kernel.maxj:27)\nnrm.NRM_Manager.main(NRM_Manager.maxj:20)\n")
PHOTON_NODE_DATA(NRM_Kernel, 130, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 139, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 127, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 128, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 129, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 131, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 138, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 133, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 134, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 136, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 137, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
PHOTON_NODE_DATA(NRM_Kernel, 135, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nnrm.NRM_Manager.main(NRM_Manager.maxj:25)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int NRM_has_errors(void)
{	return stored_has_error; }
const char* NRM_get_errors(void)
{	return stored_error; }
void NRM_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char NRM_use_simulation[16];
static void NRM_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(NRM_use_simulation, 16, "NRM_%05ld_", pid);
}
static const char *NRM_check_use_simulation(void)
{
	NRM_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = NRM_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int NRM_simulation_launch = 0;
int NRM_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = NRM_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int NRM_simulator_stop(void)
{
	const char *use_sim = NRM_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void NRM_static_init(void) 
{
	stored_maxfile = NRM_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = NRM_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = NRM_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			NRM_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void NRM_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (NRM_simulation_launch == 1) {
		int sim_stat = NRM_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		NRM_simulation_launch = 0;
	}
}

static int NRM_get_pcie_alignment(void)
{
#ifdef NRM_PCIE_ALIGNMENT
	return ((NRM_PCIE_ALIGNMENT < 1) ? 16 : NRM_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int NRM_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = NRM_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *NRM_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = NRM_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct NRM_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} NRM_callback_stream_t;

typedef struct NRM_callback_data {
	NRM_callback_stream_t stream[1]; 
	int count;
	int max_count;
} NRM_callback_data_t;

static void NRM_callback_internal(void *cb_data)
{
	NRM_callback_data_t *data = (NRM_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		NRM_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* NRM_convert_internal(
	max_file_t *maxfile,
	NRM_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	NRM_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(NRM_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function NRM_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 1;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &NRM_callback_internal;
	}

	uint64_t param_maxmitr = interface_actions->param_maxmitr;
	
	/* code for scalar NRM_Kernel.run_cycle_count */
	uint64_t ticks_NRM_Kernel = param_maxmitr;
	max_set_ticks(actions, "NRM_Kernel", param_maxmitr);
	CHECK_ERRORS;
	/* end of code for scalar NRM_Kernel.run_cycle_count*/
	
	double param_x0 = interface_actions->param_x0;
	
	/* code for scalar NRM_Kernel.x0 */
	double inscalar_NRM_Kernel_x0 = param_x0;
	max_set_double(actions, "NRM_Kernel", "x0", inscalar_NRM_Kernel_x0);
	CHECK_ERRORS;
	/* end of code for scalar NRM_Kernel.x0*/
	
	int64_t tmp_0 = (param_maxmitr * 8);
	
	/* code for stream x1 */
	size_t outstream_size_x1 = tmp_0;
	if (outstream_size_x1 > 0) {
		double *stream_ptr = interface_actions->outstream_x1;
		if (use_callback && (1 == NRM_check_aligned(interface_actions->outstream_x1))) {
			double *aligned_outstream_x1 = malloc(outstream_size_x1);
			if (aligned_outstream_x1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'x1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_x1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_x1;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_x1;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_x1;
		}
		max_queue_output(actions, "x1", stream_ptr, outstream_size_x1);
		CHECK_ERRORS;
	}
	/* end of code for stream x1 */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void NRM(
	uint64_t param_maxmitr,
	double param_x0,
	double *outstream_x1)
{
	(void) pthread_once(&slic_bs_is_initialised, NRM_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = NRM_nonblock(param_maxmitr, param_x0, outstream_x1);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *NRM_nonblock(
	uint64_t param_maxmitr,
	double param_x0,
	double *outstream_x1)
{
	NRM_actions_t interface_actions;
	interface_actions.param_maxmitr = param_maxmitr;
	interface_actions.param_x0 = param_x0;
	interface_actions.outstream_x1 = outstream_x1;
	(void) pthread_once(&slic_bs_is_initialised, NRM_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = NRM_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void NRM_run(
	max_engine_t *engine,
	NRM_actions_t *interface_actions)
{
	max_run_t *run = NRM_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *NRM_run_nonblock(
	max_engine_t *engine,
	NRM_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = NRM_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void NRM_run_group(max_group_t *group, NRM_actions_t *interface_actions)
{
	max_run_t *run = NRM_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *NRM_run_group_nonblock(max_group_t *group, NRM_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = NRM_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void NRM_run_array(max_engarray_t *engarray, NRM_actions_t *interface_actions[])
{
	max_run_t *run = NRM_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *NRM_run_array_nonblock(max_engarray_t *engarray, NRM_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = NRM_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* NRM_convert(max_file_t *maxfile, NRM_actions_t *interface_actions)
{
	return NRM_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(uint64_t, maxmitr, param_maxmitr)	
SLIC_SET_TICKS(NRM_Kernel, param_maxmitr)	
SLIC_PARAMETER_DOUBLE(double, x0, param_x0)	
SLIC_SCALAR_DOUBLE(NRM_Kernel, x0, param_x0)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_maxmitr * 8);)	
SLIC_STREAM(x1, tmp_0)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9Ik5STS5oIiBuYW1lPSJOUk0i
Pjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+
PGVuZ2luZW1vZGUgbmFtZT0iZGVmYXVsdCI+PGZ1bmN0aW9uIG5hbWU9Ik5STSIgcmV0dXJuLXZh
bHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7bWF4bWl0
ciZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX21heG1pdHIiIHR5cGU9InVp
bnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O3gwJnF1b3Q7
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1feDAiIHR5cGU9ImRvdWJsZSIvPjxhcnJh
eSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9tYXhtaXRyICogOCkg
Ynl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX3gxIiBzaXplPSIocGFy
YW1fbWF4bWl0ciAqIDgpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImRvdWJsZSI+PGRpbWVuc2lv
biBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVy
YXRvcj0iLyIgdmFsdWU9IigocGFyYW1fbWF4bWl0ciAqIDgpIC8gOCkiPjxmdW5jdGlvbkNhbGw+
PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX21heG1pdHIgKiA4
KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fbWF4bWl0ciIvPjxjb25zdGFudFZhbHVlIHZhbHVl
PSI4Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2
YWx1ZT0iOCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9k
aW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9uPjwvZW5naW5lbW9kZT48L21heGZpbGU+
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBOUk1faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRfaGFzX2Vycm9yOyB9
CmNvbnN0IGNoYXIqIE5STV9nZXRfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsg
fQp2b2lkIE5STV9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3Rv
cmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBO
Uk1fdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBOUk1fZGVmX3VzZV9zaW11bGF0aW9u
KHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50
ZihOUk1fdXNlX3NpbXVsYXRpb24sIDE2LCAiTlJNXyUwNWxkXyIsIHBpZCk7Cn0Kc3RhdGljIGNv
bnN0IGNoYXIgKk5STV9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglOUk1fZGVmX3VzZV9z
aW11bGF0aW9uKCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5n
KE1BWF9DT05GSUdfVVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVz
ZV9zaW0gPSBOUk1fdXNlX3NpbXVsYXRpb247CgkJbWF4X2NvbmZpZ19zZXRfc3RyaW5nKE1BWF9D
T05GSUdfVVNFX1NJTVVMQVRJT04sIHVzZV9zaW0pOwoJfQoJcmV0dXJuIHVzZV9zaW07Cn0KCnN0
YXRpYyBpbnQgTlJNX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IE5STV9zaW11bGF0b3Jfc3Rh
cnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gTlJNX2No
ZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAx
MDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1B
WDM0MjRBIC1TIHNpbXV0aWxzIHJlc3RhcnQiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBw
b3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwg
IiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vy
cm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBl
X2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21t
YW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQlpZiAoc3Ryc3Ry
KGJ1ZmYsICJFcnJvciIpKSB7CgkJCXNldF9lcnJvcihidWZmKTsKCQkJcmV0dmFsID0gLTE7CgkJ
fQoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIHJldHZhbDsKfQoKaW50IE5STV9zaW11bGF0
b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gTlJNX2NoZWNrX3VzZV9zaW11
bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFUSD1z
aW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDM0MjRBIC1TIHNp
bXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAiciIp
OwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0byBl
eGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJCXJl
dHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxMKSB7
CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAqLwoJ
CS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7Cgly
ZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgTlJNX3N0YXRpY19pbml0KHZvaWQpIAp7CglzdG9yZWRf
bWF4ZmlsZSA9IE5STV9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4
X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
CWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JU
X09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBt
YXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkg
ewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3Jz
KCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRf
bWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRf
dGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IE5STV9j
aGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4Zmls
ZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IE5STV9zaW11bGF0b3Jfc3RhcnQo
KTsKCQlpZiAoKHNpbV9zdGF0ID09IDApICYmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZp
bGUsIHVzZV9zaW0pID09IDEpKSB7CgkJCU5STV9zaW11bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBl
bHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5n
IHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3RydWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7
CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQgJ3VzZV9zaW11bGF0aW9uPTxzaW11bGF0
b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsK
CQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhlIGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5
c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9l
bmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwgIioiKTsKCWlmICghbWF4X29rKHN0b3Jl
ZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklH
X1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
XG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5nIG5vdy5cblxuIik7CgkJCWZmbHVzaChz
dGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShz
dG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0g
Cgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7
Cn0Kdm9pZCBOUk1fZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJ
bWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlm
IChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4Zmls
ZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxM
KSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAo
TlJNX3NpbXVsYXRpb25fbGF1bmNoID09IDEpIHsKCQlpbnQgc2ltX3N0YXQgPSBOUk1fc2ltdWxh
dG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJF
cnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCU5STV9zaW11bGF0aW9uX2xhdW5jaCA9
IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgTlJNX2dldF9wY2llX2FsaWdubWVudCh2b2lkKQp7CiNpZmRl
ZiBOUk1fUENJRV9BTElHTk1FTlQKCXJldHVybiAoKE5STV9QQ0lFX0FMSUdOTUVOVCA8IDEpID8g
MTYgOiBOUk1fUENJRV9BTElHTk1FTlQpOwojZWxzZQoJcmV0dXJuIDE2OwojZW5kaWYKfQoKc3Rh
dGljIGludCBOUk1fY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gTlJNX2dldF9wY2ll
X2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9Cgpz
dGF0aWMgdm9pZCAqTlJNX21hbGxvY19hbGlnbmVkKGNvbnN0IHNpemVfdCBzaXplKQp7Cgl2b2lk
ICpwdHI7CglpbnQgYWxpZ25tZW50ID0gTlJNX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhf
bWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFj
ZSBkZWZhdWx0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tKi8KCgoKI2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhT
VC0+ZXJyb3JzKSkgeyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lO
VEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vy
cm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1h
eF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNL
X05VTEwoVkFMVUUsIE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8g
IiIgOiBzdG9yZWRfZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdF
KTsgcmV0dXJuIFJFVDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBOUk1fY2FsbGJhY2tfc3RyZWFtIHsK
CXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXpl
OwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IE5STV9jYWxsYmFja19zdHJlYW1fdDsKCnR5cGVkZWYg
c3RydWN0IE5STV9jYWxsYmFja19kYXRhIHsKCU5STV9jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1b
MV07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBOUk1fY2FsbGJhY2tfZGF0YV90OwoK
c3RhdGljIHZvaWQgTlJNX2NhbGxiYWNrX2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCU5STV9j
YWxsYmFja19kYXRhX3QgKmRhdGEgPSAoTlJNX2NhbGxiYWNrX2RhdGFfdCopIGNiX2RhdGE7Cglm
b3IgKGludCBpID0gMCA7IGkgPCBkYXRhLT5jb3VudCA7IGkrKyApIHsKCQlOUk1fY2FsbGJhY2tf
c3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19vdXRwdXQgJiYgKHMt
PnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWduZWRfcHRyLCBzLT5z
aXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRhdGEpOwp9CgpzdGF0
aWMgbWF4X2FjdGlvbnNfdCogTlJNX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhm
aWxlLAoJTlJNX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMsCglpbnQgIGlzX2ludGVybmFs
X2NhbGwsCgl2b2lkICgqKmNhbGxiYWNrX2Z1bmMpKHZvaWQqKSwKCXZvaWQgKipjYWxsYmFja19k
YXRhKQp7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gbWF4X2FjdGlvbnNfaW5pdChtYXhmaWxl
LCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgojZGVmaW5lIENIRUNL
X0VSUk9SUyBpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHsgc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2UoYWN0aW9ucy0+ZXJyb3JzKSk7IHJldHVybiBOVUxMOyB9IAoKCU5S
TV9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxsYmFjayA9IChj
YWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwpOwoJaWYgKHVz
ZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKE5STV9jYWxsYmFja19kYXRh
X3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxl
IHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24g
TlJNX2NvbnZlcnRfaW50ZXJuYWxcbiIpOwoJCQlyZXR1cm4gTlVMTDsKCQl9CgkJY2JfZGF0YS0+
bWF4X2NvdW50ID0gMTsKCQljYl9kYXRhLT5jb3VudCAgICAgPSAwOwoJCSpjYWxsYmFja19kYXRh
ICAgICA9IGNiX2RhdGE7CgkJKmNhbGxiYWNrX2Z1bmMgICAgID0gJk5STV9jYWxsYmFja19pbnRl
cm5hbDsKCX0KCgl1aW50NjRfdCBwYXJhbV9tYXhtaXRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBh
cmFtX21heG1pdHI7CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBOUk1fS2VybmVsLnJ1bl9jeWNsZV9j
b3VudCAqLwoJdWludDY0X3QgdGlja3NfTlJNX0tlcm5lbCA9IHBhcmFtX21heG1pdHI7CgltYXhf
c2V0X3RpY2tzKGFjdGlvbnMsICJOUk1fS2VybmVsIiwgcGFyYW1fbWF4bWl0cik7CglDSEVDS19F
UlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIE5STV9LZXJuZWwucnVuX2N5Y2xlX2Nv
dW50Ki8KCQoJZG91YmxlIHBhcmFtX3gwID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX3gwOwoJ
CgkvKiBjb2RlIGZvciBzY2FsYXIgTlJNX0tlcm5lbC54MCAqLwoJZG91YmxlIGluc2NhbGFyX05S
TV9LZXJuZWxfeDAgPSBwYXJhbV94MDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJOUk1fS2Vy
bmVsIiwgIngwIiwgaW5zY2FsYXJfTlJNX0tlcm5lbF94MCk7CglDSEVDS19FUlJPUlM7CgkvKiBl
bmQgb2YgY29kZSBmb3Igc2NhbGFyIE5STV9LZXJuZWwueDAqLwoJCglpbnQ2NF90IHRtcF8wID0g
KHBhcmFtX21heG1pdHIgKiA4KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIHgxICovCglzaXplX3Qg
b3V0c3RyZWFtX3NpemVfeDEgPSB0bXBfMDsKCWlmIChvdXRzdHJlYW1fc2l6ZV94MSA+IDApIHsK
CQlkb3VibGUgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3gxOwoJ
CWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gTlJNX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2Fj
dGlvbnMtPm91dHN0cmVhbV94MSkpKSB7CgkJCWRvdWJsZSAqYWxpZ25lZF9vdXRzdHJlYW1feDEg
PSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfeDEpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1feDEg
PT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19G
SUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkg
Zm9yIHN0cmVhbSAneDEnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFj
ZV9hY3Rpb25zLT5vdXRzdHJlYW1feDE7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV94MTsKCQkJ
KCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJl
YW1fc2l6ZV94MTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0
cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25l
ZF9vdXRzdHJlYW1feDE7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgIngxIiwgc3Ry
ZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfeDEpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBv
ZiBjb2RlIGZvciBzdHJlYW0geDEgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5j
b3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0g
TlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19F
UlJPUlMKfQoKdm9pZCBOUk0oCgl1aW50NjRfdCBwYXJhbV9tYXhtaXRyLAoJZG91YmxlIHBhcmFt
X3gwLAoJZG91YmxlICpvdXRzdHJlYW1feDEpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIE5STV9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9t
YXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IE5S
TV9ub25ibG9jayhwYXJhbV9tYXhtaXRyLCBwYXJhbV94MCwgb3V0c3RyZWFtX3gxKTsKCUNIRUNL
X05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0K
Cm1heF9ydW5fdCAqTlJNX25vbmJsb2NrKAoJdWludDY0X3QgcGFyYW1fbWF4bWl0ciwKCWRvdWJs
ZSBwYXJhbV94MCwKCWRvdWJsZSAqb3V0c3RyZWFtX3gxKQp7CglOUk1fYWN0aW9uc190IGludGVy
ZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbWF4bWl0ciA9IHBhcmFtX21h
eG1pdHI7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV94MCA9IHBhcmFtX3gwOwoJaW50ZXJmYWNl
X2FjdGlvbnMub3V0c3RyZWFtX3gxID0gb3V0c3RyZWFtX3gxOwoJKHZvaWQpIHB0aHJlYWRfb25j
ZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgTlJNX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwo
c3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgq
Y2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJ
bWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IE5STV9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhm
aWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19O
VUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlk
YXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJS
T1JTX1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVu
YyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rp
b25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9l
bmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBO
VUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIE5S
TV9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCU5STV9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IE5STV9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
ICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKk5STV9ydW5fbm9uYmxvY2soCgltYXhf
ZW5naW5lX3QgKmVuZ2luZSwKCU5STV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cglt
YXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgl2
b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBO
VUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IE5STV9jb252ZXJ0X2ludGVybmFsKG1heGZp
bGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfRVJS
T1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBO
VUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNl
IHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBjYl9m
dW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25z
IiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8q
KgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGlu
dGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2Uu
CiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoK
ICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBn
cm91cC4KICovCnZvaWQgTlJNX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIE5STV9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IE5STV9ydW5fZ3Jv
dXBfbm9uYmxvY2soZ3JvdXAsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAi
VW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJy
aWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0
aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRv
IHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVy
biBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3
aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9o
aWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6
bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9u
LgogKgogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGlu
dGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRo
ZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJy
b3IuCiAqLwptYXhfcnVuX3QgKk5STV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdy
b3VwLCBOUk1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4
ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0
aW9ucyA9IE5STV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAx
LCBOVUxMLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMp
OwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rpb25z
KTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxi
cmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNl
ICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZp
Y2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJh
eSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRo
ZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBt
dXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBOUk1fcnVuX2FycmF5KG1h
eF9lbmdhcnJheV90ICplbmdhcnJheSwgTlJNX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNb
XSkKewoJbWF4X3J1bl90ICpydW4gPSBOUk1fcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBp
bnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9u
cyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5j
ZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVs
dCcuCiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhl
IGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGgg
b2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICog
VGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0
IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2Fs
bGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBh
cmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0g
W2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxy
ZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9y
IE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqTlJNX3J1bl9hcnJheV9ub25i
bG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIE5STV9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9m
aWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4
X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09
IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9j
KGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7
IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBO
Uk1fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVM
TCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlv
bnNbaV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBhY3Rpb25zKTsK
CX0KCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgYWN0
YXJyYXkpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemUgOyBpKysgKSB7IG1heF9h
Y3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNbaV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhY3RhcnJh
eSk7CglmcmVlKGFycl9hY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENv
bnZlcnRzIGEgc3RhdGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWlu
dGVyZmFjZSBtYXhfYWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4g
aW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUg
c3RhdGljIGludGVyZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0
byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3Bl
Y2lmaWMgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFj
dGlvbnMgdG8gcnVuLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190
KiBOUk1fY29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBOUk1fYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJcmV0dXJuIE5STV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNLX0VSUk9SU19TVAoj
dW5kZWYgQ0hFQ0tfTlVMTAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(NRM_Kernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 123, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 168, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 167, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 166, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 161, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 155, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 153, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 152, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 151, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 149, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 144, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 120, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(NRM_Kernel, 135, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02146ce29b2a073259df4ac3ffdf126884af4fa721cd021404f69cd74d7263975a98390a3664ad1aa5e01dc7")
#endif

